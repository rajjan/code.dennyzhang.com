* Leetcode: First Missing Positive                              :BLOG:Hard:
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+STARTUP: showeverything
:PROPERTIES:
:type:     array, classic, redo
:END:
---------------------------------------------------------------------
Find first positive integer
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/missing-element-in-sorted-array"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-array][#array]]
---------------------------------------------------------------------
Given an unsorted integer array, find the first missing positive integer.

#+BEGIN_EXAMPLE
For example,
Given [1,2,0] return 3,
and [3,4,-1,1] return 2.
#+END_EXAMPLE

Your algorithm should run in O(n) time and uses constant space.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/first-missing-positive][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/first-missing-positive/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/first-missing-positive
// Basic Ideas: Index as a hash key
//
//  For valid value of i, put it to the place of i-1
//
// Complexity: Time O(n) Space O(1)
func firstMissingPositive(nums []int) int {
    for i, v := range nums {
        if v<1 || v>len(nums) || v == i+1 {
            continue
        }
        // when stop searching: find a match, or invalid value
        for j:=nums[i]-1; nums[j]!=j+1; {
            if nums[j]<1 || nums[j]>len(nums) {
                nums[j] = j+1
                break
            }
            j, nums[j] = nums[j]-1, j+1
        }
    }
    for i, v := range nums {
        if i+1 != v {
            return i+1
        }
    }
    return len(nums)+1
}
#+END_SRC

- Solution
#+BEGIN_SRC python
## https://code.dennyzhang.com/first-missing-positive
## Basic Ideas: Put each number in its right place.
##    Sample Data:
##    1  2  0
##    3  4  0  1
##    0  4  3  0
##    1  1  3  4
## Complexity:
class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        length = len(nums)
        # set negative elements to 0s, and set elements bigger than length to 0s
        for i in xrange(length):
            if nums[i] < 0 or nums[i] > length:
                nums[i] = 0

        i = 0
        while i < length:
            j = nums[i] - 1
            if nums[i] == i+1 or nums[i] == 0 \
               or nums[i] == nums[j]:
                i = i + 1
            else:
                # swap
                nums[i], nums[j] = nums[j], nums[i]

        # get result
        for i in xrange(length):
            if nums[i] != i+1:
                return i+1
        return length+1

# s = Solution()
# print s.firstMissingPositive([3,4,-1,1])
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
