* Review: Graph Problems                                        :BLOG:Review:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type: graph, review
:END:
---------------------------------------------------------------------
Graph related questions mainly focus on depth first search and breath first search.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/review/review-graph"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

*Basic Abstractions*
| Name                                         | Summary                                                    |
|----------------------------------------------+------------------------------------------------------------|
| bfs and dfs relationship                     | [[https://code.dennyzhang.com/word-ladder-ii][Leetcode: Word Ladder II]]                                   |
| From BFS to Bidirectional BFS                | Half of the time. [[https://code.dennyzhang.com/word-ladder][Leetcode: Word Ladder]]                    |
| 3 cases: state is invalid/visited/unexamined | [[https://code.dennyzhang.com/word-ladder][Leetcode: Word Ladder]]                                      |
|----------------------------------------------+------------------------------------------------------------|
| Bridge                                       | Bridge is an edge, when removed, will disconnect the graph |
| Duplicate edge                               |                                                            |
| Cycle in undirected graphs                   |                                                            |
| Cycle in DAG                                 | [[https://code.dennyzhang.com/redundant-connection-ii][Leetcode: Redundant Connection II]]                          |
| For matrix graph problems: rectangle vs square                        |                                                 |

*Questions*
| Num | Problem                                                                 | Summary                                                 |
|-----+-------------------------------------------------------------------------+---------------------------------------------------------|
|   1 | Graph Connectivity: Count islands in a 2D matrix                        | [[https://code.dennyzhang.com/number-of-islands][Leetcode: Number of Islands]], [[https://code.dennyzhang.com/island-perimeter][Leetcode: Island Perimeter]] |
|   2 | Get the size of the largest island                                      | [[https://code.dennyzhang.com/max-area-of-island][Leetcode: Max Area of Island]]                            |
|   3 | Find shortest distance for two nodes in an undirected graph             |                                                         |
|   4 | Cycle detection in a directed graph                                     | [[https://code.dennyzhang.com/redundant-connection-ii][Leetcode: Redundant Connection II]]                       |
|   5 | Detect all cycles in a directed graph                                   | [[https://code.dennyzhang.com/find-eventual-safe-states][Leetcode: Find Eventual Safe States]]                     |
|   6 | Whether a graph is a tree                                               | [[https://code.dennyzhang.com/graph-valid-tree][Leetcode: Graph Valid Tree]]                              |
|   7 | [[https://en.wikipedia.org/wiki/Minimum_spanning_tree][Minimum Spanning Tree(MST)]] of a weighted graph - [[https://en.wikipedia.org/wiki/Kruskal%27s_algorithm][Kruskal's algorithm]]    | [[https://code.dennyzhang.com/connecting-cities-with-minimum-cost][Leetcode: Connecting Cities With Minimum Cost]]           |
|   8 | Find shortest paths in a weighted graph - [[https://en.wikipedia.org/wiki/Floyd-Warshall_algorithm][Floyd-Warshall algorithm]]      |                                                         |
|   9 | Shortest path for two nodes in a weighted graph -  [[https://en.wikipedia.org/wiki/Dijkstra's_algorithm][Dijkstra's algorithm]] | [[https://code.dennyzhang.com/connecting-cities-with-minimum-cost][Leetcode: Connecting Cities With Minimum Cost]]           |
|  10 | Update a specific region                                                | [[https://code.dennyzhang.com/flood-fill][Leetcode: Flood Fill]]                                    |
|  11 | Update regions for a given rule                                         | [[https://code.dennyzhang.com/surrounded-regions][Leetcode: Surrounded Regions]]                            |
|  12 | Number of Distinct Islands                                              | [[https://code.dennyzhang.com/number-of-distinct-islands][Leetcode: Number of Distinct Islands]]                    |
|  13 | Mark levels                                                             | [[https://code.dennyzhang.com/01-matrix][Leetcode: 01 Matrix]]                                     |
|  14 | Diameter of a tree in graph theory                                      | [[https://code.dennyzhang.com/tree-diameter][Leetcode: Tree Diameter]]                                 |
|  15 | Duplicate edges                                                         | [[https://code.dennyzhang.com/reconstruct-itinerary][Leetcode: Reconstruct Itinerary]]                         |
|  16 | Find a certain node in a graph                                          | [[https://code.dennyzhang.com/find-the-celebrity][Leetcode: Find the Celebrity]]                            |
|  17 | Coloring graph                                                          | [[https://code.dennyzhang.com/minesweeper][Leetcode: Minesweeper]]                                   |
|  18 | Find a certain path from source to destination in a graph               | [[https://code.dennyzhang.com/path-with-maximum-minimum-value][Leetcode: Path With Maximum Minimum Value]]               |
|  19 | Find the minimum steps from point1 to point2                            | [[https://code.dennyzhang.com/word-ladder][Leetcode: Word Ladder]], [[https://code.dennyzhang.com/sliding-puzzle][Leetcode: Sliding Puzzle]]         |
|  20 | Find all minimum paths from point1 to point2                            | [[https://code.dennyzhang.com/word-ladder-ii][Leetcode: Word Ladder II]]                                |
|  21 | All Paths from Source Lead to Destination                               | [[https://code.dennyzhang.com/all-paths-from-source-lead-to-destination][Leetcode: All Paths from Source Lead to Destination]]     |
|  22 | Node connectivity problem for a sparse 2D matrix                        | [[https://code.dennyzhang.com/escape-a-large-maze][Leetcode: Escape a Large Maze]]                           |
|  23 | Bricks Falling When Hit                                                 | [[https://code.dennyzhang.com/bricks-falling-when-hit][Leetcode: Bricks Falling When Hit]]                       |
|  24 | Bridges in a connected graph - [[https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm][Tarjan's algorithm]]                       | [[https://code.dennyzhang.com/critical-connections-in-a-network][Leetcode: Critical Connections in a Network]]             |
|  25 | Valid & Invalid moves                                                   | [[https://code.dennyzhang.com/alphabet-board-path][Leetcode: Alphabet Board Path]]                           |
|  26 | Move in different directions: 4 directions, 8 directions                | [[https://code.dennyzhang.com/queens-that-can-attack-the-king][Leetcode: Queens That Can Attack the King]]               |
|  27 | String Transforms Into Another String                                   | [[https://code.dennyzhang.com/string-transforms-into-another-string][Leetcode: String Transforms Into Another String]]         |
#+TBLFM: $1=@-1$1+1;N

Floyd-Warshall algorithm: Time O(n*n*n)
[[image-blog:Review: Graph Problems][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/review/review-graph/floyd-warshall.png]]

BFS/DFS/UnionFind; Binarysearch

#+BEGIN_EXAMPLE
1. How to get the initial set to examine?
2. How to move to next? What's the time complexity?
3. What if we want all possible answers, instead of the min step count?
#+END_EXAMPLE

- Move in 4 directions
#+BEGIN_SRC go
// https://code.dennyzhang.com/as-far-from-land-as-possible
// ...
    for len(queue) > 0 {
        nexts := [][]int{}
        for _, node := range queue {
            i, j := node[0], node[1]
            for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0},
                                           []int{0, 1}, []int{0, -1}} {
                i2, j2 := i+offset[0], j+offset[1]
                if i2<0 || i2>=len(grid) || 
                        j2<0 || j2>=len(grid[0]) || grid[i2][j2] == 1 {
                    continue
                }
                grid[i2][j2] = 1
                nexts = append(nexts, []int{i2, j2})
            }
        }
        level++
        queue = nexts
    }
#+END_SRC

- Move in 9 directions
#+BEGIN_SRC go
// https://code.dennyzhang.com/queens-that-can-attack-the-king
// ...
    i, j := king[0], king[1]
    for x:=-1; x<=1; x++ {
        for y:=-1; y<=1; y++ {
            if x==0 && y==0 {
                continue
            }
            // keep searching this direction
            i2, j2 := i+x, j+y
            for i2>=0 && i2<8 && j2>=0 && j2<8 {
                if m[[2]int{i2,j2}] {
                    res = append(res, []int{i2, j2})
                    break
                }
                i2, j2 = i2+x, j2+y
            }
        }
    }
#+END_SRC
Questions:

1. Why so many algorithms to find the shortest path? Shouldn't it be some optimal one(s)?

BFS:
- When to update visited_set? When add or when pop? [[https://code.dennyzhang.com/employee-importance][Employee Importance]]

BFS: 
1. visit all neighbors before visiting neighbors of your neighbors
- Keep a queue of nodes to visit
- The performamce may be different if we search from starting point or target point. [[https://code.dennyzhang.com/perfect-squares][Perfect Squares]]

Common graph algorithm problems:
1. Find length of shortest path from node s to all other nodes
- Search all nodes for a node containing a given value
- Find shortest path from node s to all other nodes

DFS:
1. visit all neighbors of a neighbor before visiting your other neighbors
- It doesn't use queue, but mark nodes as to their status. White(unchecked), Gray(Seen, but not finished), Black(finished)

Key points:
- How to evaluable the time complexity. Normally it's O(m*n). But how we can convince people with solid argument?

[[color:#c7254e][For DFS, if the path is too deep, we might run into stack overflow]].

The most impressive problems to me:
- [[https://code.dennyzhang.com/perfect-squares][Perfect Squares]]
- [[https://code.dennyzhang.com/island-perimeter][Island Perimeter]]
- [[https://code.dennyzhang.com/swim-in-rising-water][Swim in Rising Water]]

---------------------------------------------------------------------
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]

See all grap problems: [[https://code.dennyzhang.com/tag/graph/][#graph]]
[display-posts tag="graph" posts_per_page="100" orderby="title"]

See more [[https://code.dennyzhang.com/?s=blog+posts][blog_posts]].

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:

