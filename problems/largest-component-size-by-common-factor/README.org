* Leetcode: Largest Component Size by Common Factor             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     unionfind, prime, hashmap
:END:
---------------------------------------------------------------------
Largest Component Size by Common Factor
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/largest-component-size-by-common-factor"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-unionfind][#unionfind]], [[https://code.dennyzhang.com/review-hashmap][#hashmap]], [[https://code.dennyzhang.com/followup-prime][#prime]]
---------------------------------------------------------------------
Given a non-empty array of unique positive integers A, consider the following graph:

- There are A.length nodes, labelled A[0] to A[A.length - 1];
- There is an edge between A[i] and A[j] if and only if A[i] and A[j] share a common factor greater than 1.

Return the size of the largest connected component in the graph.

Example 1:
#+BEGIN_EXAMPLE
Input: [4,6,15,35]
Output: 4
#+END_EXAMPLE
[[image-blog:Largest Component Size by Common Factor][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/largest-component-size-by-common-factor/my1.png]]

Example 2:
#+BEGIN_EXAMPLE
Input: [20,50,9,63]
Output: 2
#+END_EXAMPLE
[[image-blog:Largest Component Size by Common Factor][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/largest-component-size-by-common-factor/my2.png]]

Example 3:
#+BEGIN_EXAMPLE
Input: [2,3,6,7,4,12,21,39]
Output: 8
#+END_EXAMPLE
[[image-blog:Largest Component Size by Common Factor][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/largest-component-size-by-common-factor/my3.png]]

Note:

1. 1 <= A.length <= 20000
- 1 <= A[i] <= 100000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/largest-component-size-by-common-factor][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/largest-component-size-by-common-factor/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/largest-component-size-by-common-factor
// Basic Ideas: union find
// Complexity: Time ? Space ?
type UF struct {
    parent []int
}

func constructor(size int) UF {
    parent := make([]int, size)
    for i, _ := range parent {
        parent[i] = i
    }
    return UF{parent:parent}
}

func (uf *UF) union(x, y int) {
    // TODO: rank based merge
    uf.parent[uf.find(y)] = uf.find(x)
}

func (uf *UF) find(x int) int {
    // TODO: path compression
    for uf.parent[x] != x {
        x = uf.parent[x]
    }
    return x
}

func getFactors(x int) []int {
    if x == 1 {
        return []int{1}
    }
    res := []int{}
    m := map[int]bool{}
    v := 2
    for v*v <= x {
        for x%v == 0 {
            if _, ok := m[v]; !ok {
                m[v] = true
                res = append(res, v)
            }
            x = x/v
        }
        v++
    }
    if x > 1 {
        res = append(res, x)
    }
    return res
}

func largestComponentSize(A []int) int {
    factors := make([][]int, len(A))
    values := map[int]int{}
    primes := []int{}
    index := 0
    for i, num := range A {
        factors[i] = getFactors(num)
        for _, v := range getFactors(num) {
            if _, ok := values[v]; !ok {
                values[v] = index
                primes = append(primes, v)
                index++
            }
        }
    }
    cnt := map[int]int{}
    uf := constructor(len(primes))
    for i, _ := range A {
        nums := factors[i]
        for i:=0; i<len(nums); i++ {
            for j:=i+1; j<len(nums); j++ {
                x := values[nums[i]]
                y := values[nums[j]]
                uf.union(x, y)
            }
        }
    }
    
    for i, _ := range A {
        nums := factors[i]
        // parent node count+1
        cnt[uf.find(values[nums[0]])]++
    }

    res := 0
    for _, v := range cnt {
        if v>res {
            res = v
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
