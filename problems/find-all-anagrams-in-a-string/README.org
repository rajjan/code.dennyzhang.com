* Leetcode: Find All Anagrams in a String                        :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     slidingwindow, anagram, redo, repeatedstring
:END:
---------------------------------------------------------------------
Find All Anagrams in a String
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/alphabet-board-path"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-slidingwindow][#slidingwindow]], [[https://code.dennyzhang.com/followup-anagram][#anagram]]
---------------------------------------------------------------------
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.
#+BEGIN_EXAMPLE
Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-all-anagrams-in-a-string][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/find-all-anagrams-in-a-string/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/find-all-anagrams-in-a-string
// Basic Ideas: sliding windows with fixed size
//  https://code.dennyzhang.com/find-all-anagrams-in-a-string
// Complexity: Time O(n), Space O(1)
func findAnagrams(s string, p string) []int {
    chars1 := make([]int, 26)
    chars2 := make([]int, 26)
    for i, _ := range p {
        index := int(p[i]-'a')
        chars2[index]++
    }
    res := []int{}
    // s[...i]
    for i:=0; i<len(s); i++ {
        // move the right
        index := int(s[i]-'a')
        chars1[index]++

        // move the left
        if i>=len(p) {
            index2 := int(s[i-len(p)]-'a')
            chars1[index2]--
        }
        
        // get a candidate
        j:=0
        for ; j<26; j++ {
            if chars1[j] != chars2[j] {
                break
            }
        }
        if j == 26 {
            res = append(res, i-len(p)+1)
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
