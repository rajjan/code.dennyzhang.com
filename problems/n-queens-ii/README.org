* Leetcode: N-Queens II                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     linkedlist
:END:
---------------------------------------------------------------------
N-Queens II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/my-calendar-iii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-linkedlist][#linkedlist]]
---------------------------------------------------------------------
Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/n-queens-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/n-queens-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## https://code.dennyzhang.com/n-queens-ii
## Basic Ideas: backtracking
##              Place queen row by row
##              For the position we have tried, examine conflict for rows and triangles
## Complexity: Time ? Space ?
class Solution(object):
    def totalNQueens(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n <= 0:
            return 0
        self.board = [] * n
        for i in xrange(n):
            self.board.append(['.']*n)
        self.res = 0
        self.myTotalNQueens(n, 0)
        return self.res

    def myTotalNQueens(self, n, row):
        """
        :type n: int
        :rtype: int
        """
        if row == n:
            self.res += 1
            return

        for col in xrange(n):
            self.board[row][col] = 'Q'
            if self.validQueeens(n, row, col):
                self.myTotalNQueens(n, row+1)
            self.board[row][col] = '.'

    def validQueeens(self, n, row, col):
        # check column
        for index in xrange(n):
            if index == row: continue
            if self.board[index][col] == 'Q':
                return False

        # Check triangle
        for i in xrange(n):
            for j in xrange(n):
                if i == row and j == col: continue
                if abs(i-row) == abs(j-col) and self.board[i][j] == 'Q':
                    return False
        return True
                    
# s = Solution()
# print s.totalNQueens(1) # 1
# print s.totalNQueens(4) # 2
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
