* Review: Union Find Problems                                   :BLOG:Review:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type: unionfind, review
:END:
---------------------------------------------------------------------
Union find is helpful to build relationship among different sets

Key operations: union, find, etc.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/review/review-unionfind"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

*Basic Abstractions*
| Name                     | Summary                                                                    |
|--------------------------+----------------------------------------------------------------------------|
| Entities                 | Set of objects                                                             |
| Union command            | Connect two objects or two groups                                          |
| Find query               | Is there a path connecting one object to another?                          |
| Disjoint sets of objects | Subsets of connected grid points                                           |
| Union by rank vs by size | [[https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union][link]]                                                                       |
| Reference                | [[https://www.youtube.com/watch?v=wU6udHRIkcc][YouTube: Disjoint Sets Data Structure - Weighted Union and Collapsing Find]] |
| Reference                | [[https://en.wikipedia.org/wiki/Disjoint-set_data_structure][Wikipedia: Disjoint-set data structure]]                                     |

*Scenarios*
Union-find applications involve manipulating objects of all types:
| Name                                                   | Summary                                           |
|--------------------------------------------------------+---------------------------------------------------|
| Computers in a network                                 |                                                   |
| Web pages on the Internet                              |                                                   |
| Transistors in a computer chip                         |                                                   |
| Variable name aliases                                  |                                                   |
| Pixels in a digital photo                              |                                                   |
| Metallic sites in a composite system                   |                                                   |
| Minimum spanning tree of a graph - [[https://en.wikipedia.org/wiki/Kruskal%27s_algorithm][Kruskal's algorithm]] |                                                   |
| What are the nodes and how to union nodes              | [[https://code.dennyzhang.com/largest-component-size-by-common-factor][Leetcode: Largest Component Size by Common Factor]] |

*Code Skeleton*
#+BEGIN_SRC go
// 1. Get node count. And initialize array with parent as itself
// 2. Union: Connect two nodes, which is two groups essentially
// 3. Find: find node's parent by value
type UF struct {
    parent []int
}

func constructor(size int) UF {
    parent := make([]int, size)
    for i, _ := range parent {
        parent[i] = i
    }
    return UF{parent:parent}
}

func (uf *UF) union(x, y int) {
    // TODO: rank based merge
    uf.parent[uf.find(y)] = uf.find(x)
}

func (uf *UF) find(x int) int {
    // TODO: path compression
    for uf.parent[x] != x {
        x = uf.parent[x]
    }
    return x
}
#+END_SRC

*Questions*
| Name                                            | Example                                                            |
|-------------------------------------------------+--------------------------------------------------------------------|
| What nodes are? What edges are?                 | [[https://code.dennyzhang.com/sentence-similarity-ii][Leetcode: Sentence Similarity II]], [[https://code.dennyzhang.com/regions-cut-by-slashes][Leetcode: Regions Cut By Slashes]] |
| Count node then initialize VS a fixed array     | [[https://code.dennyzhang.com/satisfiability-of-equality-equations][Leetcode: Satisfiability of Equality Equations]]                     |
| Maintain a counter for group count              | [[https://code.dennyzhang.com/graph-valid-tree][Leetcode: Graph Valid Tree]]                                         |
| Path compression to reduce levels               | Keeps tree almost completely flat, and avoid tall trees            |
| Rank based merge                                | Balance by linking small tree below large one                      |
| Collect result: add vs extract?                 | [[https://code.dennyzhang.com/most-stones-removed-with-same-row-or-column][Leetcode: Most Stones Removed with Same Row or Column]]              |
| Get the nodes relationship quickly              | [[https://code.dennyzhang.com/most-stones-removed-with-same-row-or-column][Leetcode: Most Stones Removed with Same Row or Column]]              |
| Union find for weighted graph                   | [[https://code.dennyzhang.com/evaluate-division][Leetcode: Evaluate Division]]                                        |
| Union find: connect groups and merge node count | [[https://code.dennyzhang.com/bricks-falling-when-hit][Leetcode: Bricks Falling When Hit]]                                  |
| How efficient unionfind vs DFS/BFS?             |                                                                    |
| Time and space complexity of unionfind?         |                                                                    |

---------------------------------------------------------------------
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]

See all unionfind tree problems: [[https://code.dennyzhang.com/tag/unionfind/][#unionfind]]
[display-posts tag="unionfind" posts_per_page="100" orderby="title"]

See more [[https://code.dennyzhang.com/?s=blog+posts][blog_posts]].

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
