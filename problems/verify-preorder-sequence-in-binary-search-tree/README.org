* Leetcode: Verify Preorder Sequence in Binary Search Tree                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree
:END:
---------------------------------------------------------------------
Verify Preorder Sequence in Binary Search Tree
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/verify-preorder-sequence-in-binary-search-tree"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/verify-preorder-serialization-of-a-binary-tree][Verify Preorder Serialization of a Binary Tree]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarytree][#binarytree]]
---------------------------------------------------------------------
Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.

You may assume each number in the sequence is unique.

Follow up:
Could you do it using only constant space complexity?

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/verify-preorder-sequence-in-binary-search-tree][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/verify-preorder-sequence-in-binary-search-tree
import sys
class Solution(object):
    def verifyPreorder(self, preorder):
        """
        :type preorder: List[int]
        :rtype: bool
        """
        return self.myVerifyPreorder(preorder, -sys.maxsize-1)

    def myVerifyPreorder(self, preorder, min_val):
        # print(preorder)
        length = len(preorder)
        if length == 0: return True

        index = sys.maxsize
        for i in range(length):
            if preorder[i] < min_val: return False
            if i != 0 and preorder[i] > preorder[0]:
                index = i
                break

        # left sub-tree
        if self.myVerifyPreorder(preorder[1:index], min_val) is False:
            return False

        # if index == sys.maxsize, right sub-tree is empty
        # right sub-tree
        if self.myVerifyPreorder(preorder[index:], preorder[0]) is False:
            return False

        return True

# s = Solution()
# print(s.verifyPreorder([10,7,4,8,6,40,23]))
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
