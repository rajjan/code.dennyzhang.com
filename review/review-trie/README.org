* Review: Trie Tree Problems                                    :BLOG:Review:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type: trie, review
:END:
---------------------------------------------------------------------
Trie tree is good at prefix-searching requirements.

Key operations: insert, search, prefix, getHeight, etc.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/review/review-trie"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
*Basic Abstractions*
| Name                              | Summary                                                    |
|-----------------------------------+------------------------------------------------------------|
| children map[byte]*Trie           | Use pointer                                                |
| Common Trie operations            | Insert/Search/StartsWith                                   |
| Sometimes no need to track isLeaf | [[https://code.dennyzhang.com/word-squares][Leetcode: Word Squares]]                                     |
| Trie for inverted index           | [[https://code.dennyzhang.com/stream-of-characters][Leetcode: Stream of Characters]]                             |

Suffix tree: [[https://en.wikipedia.org/wiki/Suffix_tree][wikipedia link]]  
| Name                                                       | Summary                          |
|------------------------------------------------------------+----------------------------------|
| [[https://www.geeksforgeeks.org/count-distinct-substrings-string-using-suffix-trie/][Count of distinct substrings of a string using Suffix Trie]] |                                  |
| Generate all unique substrings for given string            | [[https://stackoverflow.com/questions/2560262/generate-all-unique-substrings-for-given-string][stackoverflow link]]               |
| Finding the longest repeated substring                     |                                  |
| Finding the longest common substring                       | [[https://en.wikipedia.org/wiki/Longest_common_substring_problem][Longest common substring problem]] |
| Finding the longest palindrome in a string                 |                                  |

*Scenarios*
#+BEGIN_SRC go
type Trie struct {
    children map[byte]*Trie
    isLeaf bool
}
#+END_SRC
*Code Skeleton*

*Questions*
| Name                                                        | Example                                           |
|-------------------------------------------------------------+---------------------------------------------------|
| Extra datastructure in trie can save time and simplify code | [[https://code.dennyzhang.com/word-search-ii][Leetcode: Word Search II]]                          |
| For a-z, use _children [26]*Trie_ vs _map[byte]*Trie_       | [[https://code.dennyzhang.com/word-search-ii][Leetcode: Word Search II]]                          |
| The most impressive problems to trie problem                | [[https://code.dennyzhang.com/maximum-xor-of-two-numbers-in-an-array/][Leetcode: Maximum XOR of Two Numbers in an Array]]. |
| Time complexity of trie problems?                           | Time O(w)/O(n*w), Space O(w)                      |
| trie vs hashmap                                             | [[https://code.dennyzhang.com/word-break-ii][Leetcode: Word Break II]]                           |

- Solution: trie with extra datastructure in leaf nodes
#+BEGIN_SRC go
// https://code.dennyzhang.com/word-search-ii
type Trie struct {
    children map[byte]*Trie
    isLeaf bool
    index int
}
#+END_SRC
---------------------------------------------------------------------
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]

See all trie tree problems: [[https://code.dennyzhang.com/tag/trie/][#trie]]
[display-posts tag="trie" posts_per_page="100" orderby="title"]

See more [[https://code.dennyzhang.com/?s=blog+posts][blog_posts]].

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
** https://www.jiuzhang.com/solutions/implement-trie/              :noexport:
** https://jiayi797.github.io/2017/11/13/算法-Trie树/              :noexport:
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
