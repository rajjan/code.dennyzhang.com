* Leetcode: Majority Element                                    :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     moorevoting, classic
:END:
---------------------------------------------------------------------
More than half elements are the same. Identify it fast
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/is-a-a-majority-element"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/is-a-a-majority-element][Leetcode: Check If a Number Is Majority Element in a Sorted Array]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/tag/moorevoting][#moorevoting]], [[https://code.dennyzhang.com/review-array][#array]], [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
Given an array of size n, find the majority element. The majority element is the element that appears more than n/2 times.

You may assume that the array is non-empty and the majority element always exist in the array.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/majority-element][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/majority-element/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// https://code.dennyzhang.com/majority-element
// Basic Ideas: morevoting
//
// For two different values, collision these two
//
// Complexity: Time O(n), Space O(1)
func majorityElement(nums []int) int {
    v, cnt := nums[0], 1
    for i:=1; i<len(nums); i++ {
        if nums[i] == v { 
            cnt++ 
        } else {
            cnt--
            if cnt == 0 {
                i++
                v, cnt = nums[i], 1
            }
        }
    }
    return v
}
#+END_SRC

#+BEGIN_SRC python
## https://code.dennyzhang.com/majority-element
class Solution(object):
    def majorityElement1(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        ## Ideas: sort, then find the middle item
        ## Complexity: Time O(n*log(n)), Space O(1)
        length = len(nums)
        nums2 = sorted(nums)
        return nums2[(length-1)/2]
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
