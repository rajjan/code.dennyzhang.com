* Leetcode: Kth Smallest Element in a BST                        :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     linkedlist
:END:
---------------------------------------------------------------------
Kth Smallest Element in a BST
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/kth-smallest-element-in-a-bst"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
Given an integer array of size n, find all elements that appear more than n/3 times. The algorithm should run in linear time and in O(1) space.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/kth-smallest-element-in-a-bst][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/kth-smallest-element-in-a-bst
## Basic Ideas: In-order trasversal
## Complexity: O(k), Space O(k)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        (quota, val) = self.inorderVisit(root, k)
        # quota must be 0, since k is valid.
        return val

    def inorderVisit(self, root, k):
        if k == 0: return (0, None)
        if root is None: return (k, None)

        quota, val = k, root.val
        if root.left:
            (quota, val) = self.inorderVisit(root.left, quota)
        if quota == 0: return (0, val)
        if quota == 1: return (0, root.val)
        quota -= 1
        if root.right:
            (quota, val) = self.inorderVisit(root.right, quota)
        return (quota, val)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
