* Leetcode: Partition to K Equal Sum Subsets                     :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming
:END:
---------------------------------------------------------------------
Partition to K Equal Sum Subsets
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/partition-to-k-equal-sum-subsets"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/partition-equal-subset-sum][Partition Equal Subset Sum]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]]
---------------------------------------------------------------------
Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.
#+BEGIN_EXAMPLE
Example 1:
Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
#+END_EXAMPLE

Note:

- 1 <= k <= len(nums) <= 16.
- 0 < nums[i] < 10000.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/partition-to-k-equal-sum-subsets][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/partition-to-k-equal-sum-subsets/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: backtracking + start with the biggest ones
#+BEGIN_SRC go
// https://code.dennyzhang.com/partition-to-k-equal-sum-subsets
// Basic Ideas: backtracking
//
//  Apparently total sum should be able to be divided by k
//
// Complexity: Time ? Space ?
import "sort"
func dfs(pos int, nums[]int, target int, sum int, k int) bool {
    if target == sum {
        if k == 1 {
            return true
        } else {
            return dfs(0, nums, target, 0, k-1)
        }
    }

    if pos == len(nums) {
        return false
    }

    for i:=pos; i<len(nums); i++ {
        // choose an item
        v := nums[i]
        if v != 0 && sum + v <= target {
            nums[i] = 0
            if dfs(i+1, nums, target, sum+v, k) {
                return true
            }
            nums[i] = v
        }
    }
    return false
}

func canPartitionKSubsets(nums []int, k int) bool {
    sort.Slice(nums, func(i, j int) bool {
        return nums[i]>nums[j]
    })
    sum := 0
    for _, v := range nums {
        sum += v
    }
    target := sum/k
    if sum % k != 0 || nums[0] > target {
        return false
    }
    return dfs(0, nums, target, 0, k)
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
